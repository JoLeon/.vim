# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1:name}(${2:args}){
		${3}
	}
# Anonymous Function
snippet f
	function(${1}) {
		${2}
	}
# if
snippet if
	if (${1:true}) {${2}}
# if ... else
snippet ife
	if (${1:true}) {${2}}
	else{${3}}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	};
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	};
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10};
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
snippet {
	{
		${1}
	}
snippet cl
	console.log(${1});
snippet BB
	(function($){
		window.${1:Nombre} = {};
		$1.Models = {};
		$1.Collections = {};
		$1.Views = {};
		$1.Instances = {};
		$1.Variables = {};

		$1.Models.${2:Modelo} = Backbone.Model.extend({
		})

		$1.Collections.$2s = Backbone.Collection.extend({
			model: $1.Models.$2,
			initialize: function(){
			}
		})

		$1.Views.$2s = Backbone.View.extend({
			el: "${3:Elemento}",
			initialize: function(){
				this.render();
			},
			events: {
			},
			render: function(){
			}
		})

		$1.Views.$2 = Backbone.View.extend({
			tagName: "${4:tagName}",
			template: _.template($("#${5:templateIdentifier}-tpl").html()),
			initialize: function(){
			},
			events: {
			},
			render: function(){
				$(this.el).html(this.template({model: this.model.toJSON()}));
				return this;
			}
		})
	})(jQuery);
snippet alert2
	alert2({clase:"${1:success}", mensaje: "${2}", bloqueante: ${3:false}});${4}
